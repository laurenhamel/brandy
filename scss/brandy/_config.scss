////
/// @group brandy-config
////

/// Sets the dark color value for the `color-contrast()` function.
/// The dark color will be returned when contrasting against light backgrounds.
/// Note, the `color-contrast()` function will attempt to contrast foreground 
/// and background colors according to WebAIM accessibility standards.
///
/// @type color
$brandy-dark-text: rgb(51, 51, 51) !default;

/// Sets the light color value for the `color-contrast()` function.
/// The light color will be returned when contrasting against dark
/// backgrounds. Note, the `color-contrast()` function will attempt to contrast
/// foreground and background colors according to WebAIM accessibility standards.
///
/// @type color
$brandy-light-text: rgb(255, 255, 255) !default;


/// Set the `color-contrast()` function to use the given background color
/// to generate dark and light color values. Setting this to *true* tells
/// the `color-contrast()` function to ignore the values set for
/// `$brandy-dark-text` and `$brandy-light-text`. Setting  this to *false* 
/// will tell the `color-contrast()` function to use those values instead.
/// Note, the light and dark colors generated will be a shade or tint of the 
/// input background color, respectively.
///
/// @type boolean
$brandy-bg-contrast: false !default;


/// Sets the default map to be used for the `color()` function. This value
/// can be set equal to a map or a variable which references a map. This
/// map can have up to three levels of depth, where first-level properties 
/// should be color names, second-level properties should be color tones, 
/// and optionally, third-level keys should be tonal amounts.
///
/// @example scss - Sample definition
///   $brandy-colors-map (
///     'white': (
///       'base': white,
///       'off': whitesmoke
///       'opaque': ( 
///         25: rgba(white, .25),
///         50: rgba(white, .50),
///         75: rgba(white, .75)
///       )
///     )
///   );
///
/// @type map
/// @prop {string} <colorId> - A preferred identifier for the given color
/// @prop {color} <colorId>.base - The default color tone
/// @prop {color | map} <colorId>.<toneId> - Additional color tones
/// @prop {color} <colorId>.<toneId>.<toneAmount> - A tonal amount, usually representative of a percentage
$brandy-colors-map: (
  'black': (
    'base': #000000
  ),
  'white': (
    'base': #FFFFFF
  ),
  'grey': (
    'base': #CCCCCC,
    'dark': #333333,
    'light': #EFEFEF
  ),
  'gray': (
    'base': #CCCCCC,
    'dark': #333333,
    'light': #EFEFEF
  )
) !default;

/// Sets the default map to be used for the `font()` function. This value
/// can be set equal to a map or a variable which references a map and 
/// may contain up to two levels of depth.
/// 
/// @example scss - Sample definition
///   $brandy-fonts-map: (
///     'heading': (Impact, sans-serif),
///     'body': (
///       'text': (Arial, sans-serif),
///       'lead': (Georgia, serif)
///     )
///   );
///
/// @type map
/// @prop {font | list | map} <fontId> - A preferred identifier for the given font or font family
/// @prop {font | list} <fontId>.<fontClass> - A sub-class of a given font or font family
$brandy-fonts-map: (
  'sans-serif': sans-serif,
  'serif': serif,
  'monospace': monospace,
  'cursive': cursive
) !default;

/// Sets the default map to be used for the `screen()` function. This value
/// can be set equal to a map or a variable which references a map.
/// 
/// @example scss - Sample definition
///   $brandy-screens-map: (
///     'mobile': max-width 400px,
///     'tablet': 401px 800px,
///     'desktop':  min-width 801px
///   );
///
/// @type map
/// @prop {number} <screenId> - A breakpoint associated with the corresponding screen identifier
$brandy-screens-map: (
  'mobile': max-width 400px,
  'tablet': 400px 800px,
  'desktop': min-width 801px
) !default;

/// Sets the default map to be used for the `scale-font()` function. This value
/// can be set equal to a map or a variable which references a map. Each property
/// name in the map should also correspond to a key in the `$brandy-screens-map`.
///
/// @example scss - Sample definition
///   $brandy-scale-map: (
///     'mobile': 1,
///     'table': 1,
///     'desktop': 1
///   );
///
/// @type map
/// @prop {number} <screenId> - A font scale associated with the corresponding screen identifier
$brandy-scale-map: (
  'mobile': 1,
  'tablet': 1,
  'desktop': 1
) !default;

/// Signals to the `scale-font()` function whether or not font scaling should also
/// be responsive. If set to *true*, fonts will be scaled according to the values in
/// the `$font-scale-map` variable above for each screen breakpoint in the
/// $brandy-screens-map. If set to *false*, no scaling will occur.
///
/// @type boolean
$brandy-scale-responsive: true !default;

/// Signals to the `scale-font()` function to proportionately increase or
/// decrease the font size for the given elements. If set to *true*, font size
/// will increase from the first element in the list through the last 
/// element. If set to *false*, the reverse effect will occur.
///
/// @type boolean
$brandy-scale-increasing: false !default;

/// Sets the maximum font size for the `scale-font()` function. The maximum font 
/// size is applied to the first element in the element list if 
/// `$brandy-scale-increasing` above is set to *true*. If the above variable is
/// set to *false*, the reverse effect will occur. If no maximum value is given
/// for `$brandy-scale-min`, then the minimum value will also be used as the maximum. 
/// This maximum value is optional.
/// 
/// @type number
$brandy-scale-max: 1em !default;

/// Sets the minimum font size for the `scale-font()` function. The minimum font 
/// size is applied to the last element if `$brandy-scale-increasing` is set to
/// *true*. If the it's set to *false*, the reverse effect will occur. If no maximum 
/// value is given for `$brandy-scale-max`, then the minimum value will also be used 
/// as the maximum. This minimum value is always **required**.
/// 
/// @type number
$brandy-scale-min: 1em !default;

/// Sets the default map to be used for the `config()` function. This value
/// can be set equal to a map or a variable which references a map and can
/// be nested as deep as desired.
/// 
/// @example scss - Sample definition
///   $brandy-config-map: (
///     'page-width': 900px,
///   );
///
/// @type map
/// @prop {mixed} <configId> - Some global configuration
$brandy-config-map: () !default;

/// Sets the default map to be used for the `const()` function. This value
/// can be set equal to a map or a variable which references a map and can
/// be nested as deep as desired.
/// 
/// @example scss - Sample definition
///   $brandy-const-map: (
///     'PI': 3.14159265358979323846264338327950288,
///   );
///
/// @type map
/// @prop {mixed} <constId> - Some global constant or set of constants
$brandy-const-map: (
  'PI': 3.1415926535897932384626433832795028841971693993751,
  'E': 2.71828182845904523536028747135266249775724709369995,
  'LN(2)': 0.6931471805599453,
  'Z-INDEX': (
    'MIN': âˆ’2147483648,
    'MAX': 2147483648
  )
) !default;

/// Defines the number of columns to be used by default for the grid layout 
/// generated using the `grid()` function. This configuration will override 
/// the `grid()` function at a global level. For instance-specific overrides, 
/// consider feeding a column option into the `grid()` function during use instead.
/// 
/// @type number
$brandy-grid-columns: 12 !default;

/// Defines the number of rows to be used by default for the grid layout 
/// generated using the `grid()` function. This configuration will override 
/// the `grid()` function at a global level. For instance-specific overrides, 
/// consider feeding a row option into the `grid()` function during use instead.
/// 
/// @type number
$brandy-grid-rows: 100 !default;

/// Defines the size of gutters to be used by default for the grid layout 
/// generated using the `grid()` function. This configuration will override 
/// the `grid()` function at a global level. For instance-specific overrides, 
/// consider feeding a gutter option into the `grid()` function during use instead.
/// 
/// @type number
$brandy-grid-gutter: 25 !default;

/// Defines the grid class name to be used by default for the grid layout 
/// generated using the `grid()` function. This configuration will override 
/// the `grid()` function at a global level. For instance-specific overrides, 
/// consider feeding a class name into the `grid()` function during use instead.
/// 
/// @type string
$brandy-grid-name: 'grid' !default;

/// Defines the grid item class name to be used by default for the grid layout 
/// generated using the `grid()` function. This configuration will override 
/// the `grid()` function at a global level. For instance-specific overrides, 
/// consider feeding a class name into the `grid()` function during use instead.
/// 
/// @type string
$brandy-grid-items: 'griditem' !default;

/// Defines the unit expressions supported by default for the grid layout 
/// generated using the `grid()` function. This should be a list of strings
/// representing numerical units. This configuration will override 
/// the `grid()` function at a global level. For instance-specific overrides, 
/// consider feeding a list of units into the `grid()` function during use instead.
/// 
/// @type list
$brandy-grid-units: 'px' 'em' 'pct' !default;

/// Defines the recognized units that Brandy uses for some functions and mixins.
///
/// @type map
$brandy-units: (
  'px': 0px,
  'pt': 0pt,
  'pc': 0pc,
  'pica': 0pica,
  'em': 0em,
  'rem': 0rem,
  'mm': 0mm,
  'cm': 0cm,
  'in': 0in,
  'ex': 0ex,
  'ch': 0ch,
  'vw': 0vw,
  'vh': 0vh,
  'vmax': 0vmax,
  'vmin': 0vmin,
  'deg': 0deg,
  'rad': 0rad,
  'grad': 0grad,
  'turn': 0turn,
  'pct': 0%,
  '%': 0%,
  's': 0s,
  'ms': 0ms,
  'dpcm': 0dpcm,
  'dppx': 0dppx,
  'Hz': 0Hz,
  'kHz': 0kHz,
  'dpi': 0dpi
);

/// Defines the recognized alphabet characters that Brandy uses for some function and mixins.
/// Use the map keys to represent *lowercase* letters and map values to represent *uppercase* letters. 
///
/// @type map
$brandy-letters: (
  'a': 'A',
  'b': 'B',
  'c': 'C',
  'd': 'D',
  'e': 'E',
  'f': 'F',
  'g': 'G',
  'h': 'H',
  'i': 'I',
  'j': 'J',
  'k': 'K',
  'l': 'L',
  'm': 'M',
  'n': 'N',
  'o': 'O',
  'p': 'P',
  'q': 'Q',
  'r': 'R',
  's': 'S',
  't': 'T',
  'u': 'U',
  'v': 'V',
  'w': 'W',
  'x': 'X',
  'y': 'Y',
  'z': 'Z',
);

/// Defines the recognized numeric characters that Brandy uses for some function and mixins.
/// Use the map keys to represent numbers in *string* form and the map values to represent
/// numbers in their *numeric* form.
///
/// @type map
$brandy-numbers: (
  '0': 0,
  '1': 1,
  '2': 2,
  '3': 3,
  '4': 4,
  '5': 5,
  '6': 6,
  '7': 7,
  '8': 8,
  '9': 9
);

/// Defines a list of words that should not be capitalized when converting a string to titlecase.
///
/// @type list
$brandy-title-blacklist: 'a' 'an' 'the' 'and' 'but' 'for' 'yet' 'at' 'by' 'from' 'to' 'as' 'in' 'or' 'for' 'nor' 'on' 'of' 'up';