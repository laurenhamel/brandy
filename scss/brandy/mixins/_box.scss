////
/// @group brandy-layout
////

/// Adds a border radius to the right side of an element
/// 
/// @param {number} $radius - Some radius amount
@mixin border-right-radius( $radius ){
  
  border-top-right-radius: $radius;
  border-bottom-right-radius: $radius;
  
}

/// Adds a border radius to the top side of an element
/// 
/// @param {number} $radius - Some radius amount
@mixin border-top-radius( $radius ){
  
  border-top-right-radius: $radius;
  border-top-left-radius: $radius;
  
}

/// Adds a border radius to the left side of an element
/// 
/// @param {number} $radius - Some radius amount
@mixin border-left-radius( $radius ){
  
  border-top-left-radius: $radius;
  border-bottom-left-radius: $radius;
  
}

/// Adds a border radius to the bottom side of an element
/// 
/// @param {number} $radius - Some radius amount
@mixin border-bottom-radius( $radius ){
  
  border-bottom-left-radius: $radius;
  border-bottom-right-radius: $radius;
  
}

/// Adds a border radius to on an element the given diagonal
/// 
/// @requires {function} contains
/// @param {number} $radius - Some radius amount
/// @param {string} $direction - Whether to start at the top `left` or `right` corner
/// @throws 'Mixin `border-diagonal-radius` expects `left` or `right` for argument `$direction` but `#{$direction}` was given.'
@mixin border-diagonal-radius( $radius, $direction: left ) {
  
  @if( not contains(left right, $direction) ) {
    
    @error 'Mixin `border-diagonal-radius` expects `left` or `right` for argument `$direction` but `#{$direction}` was given.';
    
  }
  
  border-top-#{if(direction == left, left, right)}-radius: $radius;
  border-bottom-#{if(direction == left, right, left)}-radius: $radius;
  
}

/// Creates a layered border effect using box shadow.
///
/// @param {arglist} layers - The desired border layers
@mixin layered-border( $layers... ) {
  
  // Initialize the box shadow value needed to create the desired border layers.
  $borders: ();
  
  // Build the border layers.
  @each $layer in $layers {
    
    // Get border properties.
    $width: nth($layer, 1);
    $style: nth($layer, 2); // Ignore this and always treat it as `solid`.
    $color: nth($layer, 3);
    
    // Create border layer.
    $borders: append($borders, 0 0 0 $width $color, comma);
    
  }
  
  // Add border layers.
  box-shadow: $borders;
  
}

/// Sets the `width` and `height` equally for an element 
///
/// @param {number} $size - Some length
@mixin size( $size ) {
  
  width: $size;
  height: $size;
  
}

/// Sets the fluid aspect ratio of an element
///
/// @param {number} $ratio - Some aspect ratio in the form of `width / height`
/// @param {number} $width - The desired width as a percentage 
/// @throws 'Mixin `aspect-ratio` expects a percentage for argument `$width` but `#{$width}` was given.'
@mixin aspect-ratio( $ratio, $width: 100% ) {
  
  @if( not is-percentage($width) ) {
    
    @error 'Mixin `aspect-ratio` expects a percentage for argument `$width` but `#{$width}` was given.';
    
  }
  
  width: $width;
  padding-bottom: $width / $ratio;
  
}