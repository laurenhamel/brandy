////
/// @group brandy-strings
////

/// Replaces all instances of a search string with a replacement string
///
/// @author Hugo Giraudel
/// @param {string} $string - The string to be worked on
/// @param {string} $search - The string to be searched for
/// @param {string} $replace [''] - The string to be used as a replacement
/// @returns {string}
@function str-replace( $string, $search, $replace: '' ){
    
    $index: str-index($string, $search);
    
    @if $index {
        
        @return 
          str-slice( $string, 1, $index - 1) + $replace + 
          str-replace( str-slice($string, $index + str-length($search)), $search, $replace );
        
    }
    
    @return $string;
}

/// Splits a string into a list
///
/// @param {string} $string - The string to be worked on
/// @param {string} $delimiter [','] - The string delimiter
/// @returns {list}
@function str-split( $string, $delimiter: ',' ){
    
  $list: ();
  
  $index: str-index($string, $delimiter);
    
  @while ($index != null) {
    
    $item: str-slice($string, 1, $index - 1);
    
    $list: append($list, $item);
    
    $string: str-slice($string, $index + 1);
    
    $index: str-index($string, $delimiter);
    
  }
  
  $list: append($list, $string);

  @return $list;
  
}

/// Removes extra characters from the start and end of a string
///
/// @param {string} $string - The string to be worked on
/// @param {string} $characters [' '] - One or more characters to be trimmed
/// @returns {string}
@function str-trim( $string, $characters: ' ' ) {
  
  $start: 1;
  $stop: str-length($string);
  
  $first: str-slice($string, $start, 1);
  $last: str-slice($string, -1);
    
  @while( index($characters, $first) != null ) {

    $start: $start + 1;

    $first: str-slice(str-slice($string, $start), 1, 1);

  }

  @while( index($characters, $last) != null ) { 

    $stop: $stop - 1;

    $last: str-slice(str-slice($string, 1, $stop), -1);

  }

  @return str-slice($string, $start, $stop);
  
}

/// Removes extra characters from the end of a string
///
/// @param {string} $string - The string to be worked on
/// @param {string} $characters [' '] - One or more characters to be trimmed
/// @returns {string}
@function str-trim-right( $string, $characters: ' ' ) {
  
  $start: 1;
  $stop: str-length($string);
  
  $last: str-slice($string, -1);
  
  @while( index($characters, $last) != null ) { 

    $stop: $stop - 1;

    $last: str-slice(str-slice($string, 1, $stop), -1);

  }
  
  @return str-slice($string, $start, $stop);
  
}

/// Removes extra characters from the start of a string
///
/// @param {string} $string - The string to be worked on
/// @param {string} $characters [' '] - One or more characters to be trimmed
/// @returns {string}
@function str-trim-left( $string, $characters: ' ' ) {
  
  $start: 1;
  $stop: str-length($string);
  
  $first: str-slice($string, $start, 1);
    
  @while( index($characters, $first) != null ) { 

    $start: $start + 1;

    $first: str-slice(str-slice($string, $start), 1, 1);

  }
  
  @return str-slice($string, $start, $stop);
  
}

/// Determines if a string contains another string
///
/// @param {string} $string - The string to be worked on
/// @param {string} $search - The string to be searched for
/// @returns {string}
@function str-contains( $string, $search ) {
  
  @return str-index($string, $search) != null;
  
}

/// Determines if a string starts with another string
///
/// @param {string} $string - The string to be worked on
/// @param {string} $search - The string to be searched for
/// @returns {string}
@function str-starts-with( $string, $search ) {
  
  @return str-index($string, $search) == 1;
  
}

/// Determines if a string ends with another string
///
/// @param {string} $string - The string to be worked on
/// @param {string} $search - The string to be searched for
/// @returns {string}
@function str-ends-with( $string, $search ) {
  
  @return str-index($string, $search) == str-length($string) - str-length($search) + 1;
  
}

/// Reverses a string
///
/// @requires {function} char-at
/// @param {string} $string - Some string
/// @returns {string}
@function str-reverse( $string ) {
  
  $result: '';
  
  @for $i from (str-length($string) * -1) through -1 {
    
    $character: char-at($string, abs($i));
    
    $result: $result + $character;
    
  }
  
  @return $result;
  
}

/// Determines if a string is a palindrome
///
/// @param {string} $string - Some string
/// @returns {boolean}
@function str-is-palindrome( $string ) {
  
  @return $string == str-reverse($string);
  
}

/// Determines if a string is a letter
///
/// @requires {function} contains
/// @requires {function} char-at
/// @requires {variable} $brandy-letters
/// @param {string} $string - Some string
/// @returns {boolean}
@function str-is-letter( $string ) {
  
  $insensitive: to-lower-case($string);
  
  @for $i from 1 through str-length($insensitive) {
    
    $letter: char-at($insensitive, $i);
    
    @if( not contains(map-keys($brandy-letters), $letter) ) { @return false; }
    
  }
  
  @return true;
  
}

/// Determines if a string is representative of some units
///
/// @requires {function} contains
/// @requires {variable} $brandy-units
/// @param {string} $unit - Some string representation of a unit
/// @returns {boolean}
@function str-is-unit( $unit ) {
  
  @return contains(map-keys($brandy-units), $unit);
  
}

/// Determines if a string is a number
///
/// @requires {function} contains
/// @requires {function} str-is-letter
/// @requires {function} str-is-unit
/// @param {string} $string - Some string
/// @returns {boolean}
@function str-is-number( $string ) {
  
  $numbers: '0' '1' '2' '3' '4' '5' '6' '7' '8' '9';
  
  $negative: if( str-slice($string, 1, 1) == '-', true, false );
  
  @if( $negative ) { $string: str-slice($string, 2); }
  
  $index: 1;
  
  $number: str-slice($string, $index, 1);
  
  @while( $index <= str-length($string) and not str-is-letter($number) ) {
    
    @if( not contains($numbers, $number) ) { @return false; }
    
    $index: $index + 1;
    
    $number: str-slice($string, $index, 1);
    
  }
  
  @if( $index < str-length($string) ) {
    
    $unit: str-slice($string, $index);
    
    @if( not str-is-unit($unit) ) { @return false; }
    
  }
  
  @return true;
  
}

/// Retrieves the substring between two characters
///
/// @requires {function} is-list
/// @requires {function} is-null
/// @requires {function} char-at
/// @requires {function} first
/// @requires {function} last
/// @param {string} $string - Some string to be indexed
/// @param {string | list} $first - The first character to look for, optionally passed as a list where second item indicates occurrence index
/// @param {string | list} $last - The last character to look for, optionally passed as a list where second item indicates occurrence index
/// @param {boolean} $inclusive [true] - Whether or not the `$first` and `$last` characters should be included
/// @returns {string} - The string between `$first` and `$last` or `''` if no occurrence of `$last` follows `$first`
@function str-between( $string, $first, $last, $inclusive: true ) {
  
  // Both are lists.
  @if( is-list($first) and is-list($last) ) {
    
    $first-index: last($first);
    $last-index: last($last);
    $first: first($first);
    $last: first($last);
    $first-occurs: 0;
    $first-occurrence: null;
    $last-occurs: 0;
    $last-occurrence: null;
    $found-first: false;
    $found-last: false;
    $result: '';
    
    @for $i from 1 through str-length($string) {
      
      $character: char-at($string, $i);
      $was-first: false;
      
      @if( $character == $first ) { $first-occurs: $first-occurs + 1; }
      @if( not $was-first and $character == $last ) { $last-occurs: $last-occurs + 1; }
      @if( $first-occurs == $first-index ) { $first-occurrence: $i; $found-first: true; $was-first: true; }
      @if( $last-occurs == $last-index ) { $last-occurrence: $i; $found-last: true; }
      @if( $found-first and not $found-last ) { $result: $result + $character; }
      
    }
    
    @return if( not $found-last, '', if($inclusive, $result + $last, str-slice($result, 2)) );
    
  }
  
  // Only first is list.
  @else if( is-list($first) ) {
    
    $index: last($first);
    $first: first($first);
    $occurs: 0;
    $occurrence: null;
    $result: '';
    $found-first: false;
    $found-last: false;
    
    @for $i from 1 through str-length($string) {
      
      $character: char-at($string, $i);
      $was-first: false;
      
      @if( $character == $first ) { $occurs: $occurs + 1; }
      @if( not $was-first and $character == $last ) { $found-last: true; }
      @if( $occurs == $index ) { $occurrence: $i; $found-first: true; $was-first: true; }
      @if( $found-first and not $found-last ) { $result: $result + $character; }
      
    }
    
    @return if( not $found-last, '', if($inclusive, $result + $last, str-slice($result, 2)) );
    
  }
  
  // Only last is list.
  @else if( is-list($last) ) {

    $index: last($last);
    $last: first($last);
    $occurs: 0;
    $occurrence: null;
    $result: '';
    $found-first: false;
    $found-last: false;
    
    @for $i from 1 through str-length($string) {
      
      $character: char-at($string, $i);
      $was-first: false;
      
      @if( not $found-first and $character == $first ) { $found-first: true; $was-first: true; }
      @if( not $was-first and $character == $last ) { $occurs: $occurs + 1; }
      @if( $occurs == $index ) { $occurrence: $i; $found-last: true; }
      @if( $found-first and not $found-last ) { $result: $result + $character; }
      
    }
    
    @return if( not $found-last, '', if($inclusive, $result + $last, str-slice($result, 2)) );
    
  }
  
  // Neither are lists.
  @else {
    
    $found-first: false;
    $found-last: false;
    $result: '';
    
    @for $i from 1 through str-length($string) {
      
      $character: char-at($string, $i);
      $was-first: false;
      
      @if( not $found-first and $character == $first ) { $found-first: true; $was-first: true; }
      @if( not $found-last and not $was-first and $character == $last ) { $found-last: true; }
      @if( $found-first and not $found-last ) { $result: $result + $character; }
      
    }
    
    @return if( not $found-last, '', if($inclusive, $result + $last, str-slice($result, 2)) );
    
  }
  
}

/// Extracts a character at the given index within a string
///
/// @param {string} $string - Some string
/// @param {number} $index - The index at which the character should be extracted
/// @returns {string}
@function char-at( $string, $index ) {
  
  @return str-slice($string, $index, $index);
  
}

/// Extracts the first character from a string
///
/// @param {string} $string - Some string
/// @returns {string}
@function char-first( $string ) {
  
  @return str-slice($string, 1, 1);
  
}

/// Extracts the last character from a string
///
/// @param {string} $string - Some string
/// @returns {string}
@function char-last( $string ) {
  
  @return str-slice($string, -1, -1);
  
}

/// Counts the number of characters between two characters within a string, optionally passing occurrence index
///
/// @requires {function} is-list
/// @requires {function} is-null
/// @requires {function} char-at
/// @requires {function} first
/// @requires {function} last
/// @param {string} $string - Some string to be indexed
/// @param {string | list} $first - The first character to look for, optionally passed as a list where second item indicates occurrence index
/// @param {string | list} $last - The last character to look for, optionally passed as a list where second item indicates occurrence index
/// @param {boolean} $inclusive [true] - Whether or not the `$last` character should be counted
/// @returns {number} - The number of characters between `$first` and `$last` or `0` if no occurrence of `$last` follows `$first`
@function chars-between( $string, $first, $last, $inclusive: true ) {
  
  // Both are lists.
  @if( is-list($first) and is-list($last) ) {
    
    $first-index: last($first);
    $last-index: last($last);
    $first: first($first);
    $last: first($last);
    $first-occurs: 0;
    $first-occurrence: null;
    $last-occurs: 0;
    $last-occurrence: null;
    $between: 0;
    $found-first: false;
    $found-last: false;
    
    @for $i from 1 through str-length($string) {
      
      $character: char-at($string, $i);
      $was-first: false;
      
      @if( $character == $first ) { $first-occurs: $first-occurs + 1; }
      @if( not $was-first and $character == $last ) { $last-occurs: $last-occurs + 1; }
      @if( $first-occurs == $first-index ) { $first-occurrence: $i; $found-first: true; $was-first: true; }
      @if( $last-occurs == $last-index ) { $last-occurrence: $i; $found-last: true; }
      @if( $found-first and not $found-last ) { $between: $between + 1; }
      
    }
    
    @return if( not $found-last, 0, if($inclusive, $between, $between - 1) );
    
  }
  
  // Only first is list.
  @else if( is-list($first) ) {
    
    $index: last($first);
    $first: first($first);
    $occurs: 0;
    $occurrence: null;
    $between: 0;
    $found-first: false;
    $found-last: false;
    
    @for $i from 1 through str-length($string) {
      
      $character: char-at($string, $i);
      $was-first: false;
      
      @if( $character == $first ) { $occurs: $occurs + 1; }
      @if( not $was-first and $character == $last ) { $found-last: true; }
      @if( $occurs == $index ) { $occurrence: $i; $found-first: true; $was-first: true; }
      @if( $found-first and not $found-last ) { $between: $between + 1; }
      
    }
    
    @return if( not $found-last, 0, if($inclusive, $between, $between - 1) );
    
  }
  
  // Only last is list.
  @else if( is-list($last) ) {

    $index: last($last);
    $last: first($last);
    $occurs: 0;
    $occurrence: null;
    $between: 0;
    $found-first: false;
    $found-last: false;
    
    @for $i from 1 through str-length($string) {
      
      $character: char-at($string, $i);
      $was-first: false;
      
      @if( not $found-first and $character == $first ) { $found-first: true; $was-first: true; }
      @if( not $was-first and $character == $last ) { $occurs: $occurs + 1; }
      @if( $occurs == $index ) { $occurrence: $i; $found-last: true; }
      @if( $found-first and not $found-last ) { $between: $between + 1; }
      
    }
    
    @return if( not $found-last, 0, if($inclusive, $between, $between - 1) );
    
  }
  
  // Neither are lists.
  @else {
    
    $found-first: false;
    $found-last: false;
    $between: 0;
    
    @for $i from 1 through str-length($string) {
      
      $character: char-at($string, $i);
      $was-first: false;
      
      @if( not $found-first and $character == $first ) { $found-first: true; $was-first: true; }
      @if( not $found-last and not $was-first and $character == $last ) { $found-last: true; }
      @if( $found-first and not $found-last ) { $between: $between + 1; }
      
    }
    
    @return if( not $found-last, 0, if($inclusive, $between, $between - 1) );
    
  }
  
}

