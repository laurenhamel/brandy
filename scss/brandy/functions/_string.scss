////
/// @group brandy-strings
////

/// Replaces all instances of a search string with a replacement string
///
/// @author Hugo Giraudel
/// @param {string} $string - The string to be worked on
/// @param {string} $search - The string to be searched for
/// @param {string} $replace [''] - The string to be used as a replacement
/// @returns {string}
@function str-replace( $string, $search, $replace: '' ){
    
    $index: str-index($string, $search);
    
    @if $index {
        
        @return 
          str-slice( $string, 1, $index - 1) + $replace + 
          str-replace( str-slice($string, $index + str-length($search)), $search, $replace );
        
    }
    
    @return $string;
}

/// Splits a string into a list
///
/// @param {string} $string - The string to be worked on
/// @param {string} $delimiter [','] - The string delimiter
/// @returns {list}
@function str-split( $string, $delimiter: ',' ){
    
  $list: ();
  
  $index: str-index($string, $delimiter);
    
  @while ($index != null) {
    
    $item: str-slice($string, 1, $index - 1);
    
    $list: append($list, $item);
    
    $string: str-slice($string, $index + 1);
    
    $index: str-index($string, $delimiter);
    
  }
  
  $list: append($list, $string);

  @return $list;
  
}

/// Removes extra characters from the start and end of a string
///
/// @param {string} $string - The string to be worked on
/// @param {string} $characters [' '] - One or more characters to be trimmed
/// @returns {string}
@function str-trim( $string, $characters: ' ' ) {
  
  $start: 1;
  $stop: str-length($string);
  
  $first: str-slice($string, $start, 1);
  $last: str-slice($string, -1);
    
  @while( index($characters, $first) != null ) {

    $start: $start + 1;

    $first: str-slice(str-slice($string, $start), 1, 1);

  }

  @while( index($characters, $last) != null ) { 

    $stop: $stop - 1;

    $last: str-slice(str-slice($string, 1, $stop), -1);

  }

  @return str-slice($string, $start, $stop);
  
}

/// Removes extra characters from the end of a string
///
/// @param {string} $string - The string to be worked on
/// @param {string} $characters [' '] - One or more characters to be trimmed
/// @returns {string}
@function str-trim-right( $string, $characters: ' ' ) {
  
  $start: 1;
  $stop: str-length($string);
  
  $last: str-slice($string, -1);
  
  @while( index($characters, $last) != null ) { 

    $stop: $stop - 1;

    $last: str-slice(str-slice($string, 1, $stop), -1);

  }
  
  @return str-slice($string, $start, $stop);
  
}

/// Removes extra characters from the start of a string
///
/// @param {string} $string - The string to be worked on
/// @param {string} $characters [' '] - One or more characters to be trimmed
/// @returns {string}
@function str-trim-left( $string, $characters: ' ' ) {
  
  $start: 1;
  $stop: str-length($string);
  
  $first: str-slice($string, $start, 1);
    
  @while( index($characters, $first) != null ) { 

    $start: $start + 1;

    $first: str-slice(str-slice($string, $start), 1, 1);

  }
  
  @return str-slice($string, $start, $stop);
  
}

/// Determines if a string contains another string
///
/// @param {string} $string - The string to be worked on
/// @param {string} $search - The string to be searched for
/// @returns {string}
@function str-contains( $string, $search ) {
  
  @return str-index($string, $search) != null;
  
}

/// Determines if a string starts with another string
///
/// @param {string} $string - The string to be worked on
/// @param {string} $search - The string to be searched for
/// @returns {string}
@function str-starts-with( $string, $search ) {
  
  @return str-index($string, $search) == 1;
  
}

/// Determines if a string ends with another string
///
/// @param {string} $string - The string to be worked on
/// @param {string} $search - The string to be searched for
/// @returns {string}
@function str-ends-with( $string, $search ) {
  
  @return str-index($string, $search) == str-length($string) - str-length($search) + 1;
  
}

/// Reverses a string
///
/// @param {string} $string - Some string
/// @returns {string}
@function str-reverse( $string ) {
  
  $result: '';
  
  @for $i from str-length($string) * -1 through -1 {
    
    $result: $result + str-slice($string, abs($i), 1);
    
  }
  
  @return $result;
  
}

/// Determines if a string is a palindrome
///
/// @param {string} $string - Some string
/// @returns {boolean}
@function str-is-palindrome( $string ) {
  
  @return $string == str-reverse($string);
  
}

/// Determines if a string is a letter
///
/// @requires {function} contains
/// @param {string} $string - Some string
/// @returns {boolean}
@function str-is-letter( $string ) {
  
  $letters: 'a' 'b' 'c' 'd' 'e' 'f' 'g' 'h' 'i' 'j' 'k' 'l' 'm' 'n' 'o' 'p' 'q' 'r' 's' 't' 'u' 'v' 'w' 'x' 'y' 'z';
  
  $lower: to-lower-case($string);
  
  @for $i from 1 through str-length($lower) {
    
    $letter: str-slice($lower, $i, 1);
    
    @if( not contains($letters, $letter) ) { @return false; }
    
  }
  
  @return true;
  
}

/// Determines if a string is representative of some units
///
/// @require {function} contains
/// @param {string} $unit - Some string representation of a unit
/// @returns {boolean}
@function str-is-unit( $unit ) {
  
  $units: 'px' 'em' 'pct' '%' 'rem' 'cm' 'in' 'mm' 'ex' 'vh' 'vw' 'pc' 'pt' 'pica' 'vmin' 'vmax';
  
  @return contains($units, $unit);
  
}

/// Determines if a string is a number
///
/// @requires {function} contains
/// @requires {function} str-is-letter
/// @requires {function} str-is-unit
/// @param {string} $string - Some string
/// @returns {boolean}
@function str-is-number( $string ) {
  
  $numbers: '0' '1' '2' '3' '4' '5' '6' '7' '8' '9';
  
  $negative: if( str-slice($string, 1, 1) == '-', true, false );
  
  @if( $negative ) { $string: str-slice($string, 2); }
  
  $index: 1;
  
  $number: str-slice($string, $index, 1);
  
  @while( $index <= str-length($string) and not str-is-letter($number) ) {
    
    @if( not contains($numbers, $number) ) { @return false; }
    
    $index: $index + 1;
    
    $number: str-slice($string, $index, 1);
    
  }
  
  @if( $index < str-length($string) ) {
    
    $unit: str-slice($string, $index);
    
    @if( not str-is-unit($unit) ) { @return false; }
    
  }
  
  @return true;
  
}