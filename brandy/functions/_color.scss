// Adpated from Brendan Saunders' brightness()
@function brightness( $color ){
    
    $factor: (
        R: .299,
        G: .587,
        B: .114
    );
    
    $R: red( $color ) * map-get( $factor, R ) ;
    $G: green( $color ) * map-get( $factor, G );
    $B: blue( $color ) * map-get( $factor, B );
    
    @return ($R + $G + $B) / 255 * 100%;
    
}

// Adapted from https://gist.github.com/voxpelli/6304812 luma()
@function luma($color){
  
  $RGB: (red($color) / 255), (green($color)/ 255), (blue($color) / 255);
  
  @each $X in $RGB {
    $X: if($X <= .03928, $X / 12.92, pow((($X + .055) / 1.055), 2.4));
  }
  
  $R: nth($RGB, 1);
  $G: nth($RGB, 2);
  $B: nth($RGB, 3);
  
  @return .2126 * $R + .7152 * $G + .0722 * $B;
  
}

// Adapted from Mike Reithmuller contrast_ratio()
@function contrast-ratio( $color1, $color2 ){
  
  $luma1: luma($color1) + 0.05;
  $luma2: luma($color2) + 0.05;
  
  @return max($luma1, $luma2) / min($luma1, $luma2);
  
}

// Adapted from Mike Reithmuller text-contrast() 
// and Brendan Saunders' color-contrast()
@function color-contrast( $color, $dark: $brandy-dark-text, $light: $brandy-light-text ){
  
  // Use lumanice first.
  $WCAG: 7, 4.5;

  // Start with the highest threshold.
  @for $index from 1 through length($WCAG) {

    $threshold: nth($WCAG, $index);
    $max: 100%;
    $min: 0%;
    $increment: 5%;
    $range: $max - $min;
    $steps: $range / $increment;

    // Uncomment to contrast against the background color.
    /*@for $step from 0 through $steps {

      $percent: $increment * $step + $min;

      $lighter: lighten($color, $percent);
      $lighter-ratio: contrast-ratio($color, $lighter);

      $darker: darken($color, $percent);
      $darker-ratio: contrast-ratio($color, $darker);

      @if($lighter-ratio > $darker-ratio){
        @if($lighter-ratio > $threshold){
          @return $lighter;
        }
      }
      @else if($darker-ratio > $lighter-ratio){
        @if($darker-ratio > $threshold){
          @return $darker;
        }
      }

    }*/

    $light-ratio: contrast-ratio($color, $light);
    $dark-ratio: contrast-ratio($color, $dark);

    @if($light-ratio > $dark-ratio){
      @if($light-ratio > $threshold){
        @return $light;
      }
    }
    @else if($dark-ratio > $light-ratio){
      @if($dark-ratio > $threshold){
        @return $dark;
      }
    }
    
  }
    
  // Try lumanince next.
  $luma: luma($color);
  
  @if( $luma >= 0.175 ){ 
    @return $dark;
  }
  @else if( $luma <= 0.1833 ){
    @return $light;
  }
  
  // Resort to brightness.
  
  // Brightness
  $brightness-color: brightness( $color );
  $brightness-dark: brightness( $dark );
  $brightness-light: brightness( $light );

  // Difference
  $difference-dark: abs( $brightness-color - $brightness-dark );
  $difference-light: abs( $brightness-color - $brightness-light );

  @return if( $difference-light > $difference-dark, $light, $dark );
        
}

// to-HEX() - Retrieves the HEX value of the color given
@function to-HEX( $color ){
    
    $DEC: 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15;
    $HEX: 0 1 2 3 4 5 6 7 8 9 A  B  C  D  E  F;
    
    $R: red($color);
    $G: green($color);
    $B: blue($color);
    
    $R1: nth($HEX, index($DEC, floor( $R / 16 ) ));
    $R2: nth($HEX, index($DEC, floor( $R % 16 ) ));
    $G1: nth($HEX, index($DEC, floor( $G / 16 ) ));
    $G2: nth($HEX, index($DEC, floor( $G % 16 ) ));
    $B1: nth($HEX, index($DEC, floor( $B / 16) ));
    $B2: nth($HEX, index($DEC, floor( $B % 16) ));

    $result: $R1 $R2 $G1 $G2 $B1 $B2;
   
    @return unquote( '\#' + to-string($result,'') );
    
};

// to-RGB() - Retrieves the RGB value of the color given
@function to-RGB( $color ){
    
    $RGB: red($color), green($color), blue($color);
    
    @return unquote( 'rgb(' + $RGB + ')' );
}

// Adapted from Hugo Giraudel's tint()
@function tint( $color, $percent ){
    @return mix(white, $color, $percent);
}

// Adapted from Hugo Giraudel's shade()
@function shade( $color, $percent ){
    @return mix(black, $color, $percent);
}
